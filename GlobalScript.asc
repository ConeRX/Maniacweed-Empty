// main global script file
// called when the game starts, before the first room is loaded

// =======================================================================================

#region Allgemein

function game_start() 
{
  SetRestartPoint();
  ShowHotspots.SetKey(eKeyH); // default key is space
  ShowHotspots.Enable();  
}

// put anything you want to happen every game cycle in here
function repeatedly_execute() 
{

}

// put here anything you want to happen every game cycle, even when the game is blocked
function repeatedly_execute_always() 
{
}

void ShowOptions()
{
    Verbs.UpdateActionBar();
    OptionGui.ShowOptions();
}

// called when a key is pressed. keycode holds the key's ASCII code
function on_key_press(eKeyCode keycode, int mod) 
{
  if (keycode == eKeyF5) ShowOptions();
  if (keycode == eKeyF8) gRestart.Visible=true;
  if (keycode == eKeyF12)   SaveScreenShot("screenshot.png");  // F12
  if (mod & eKeyModCtrl)
  {
    if (keycode == eKeyC || keycode == eKeyQ) gQuit.Visible=true;  // Ctrl-C or CTRL-Q QUIT
    if (keycode == eKeyS) Debug(0,0); // Ctrl-S, give all inventory
    if (keycode == eKeyV) Debug(1,0); // Ctrl-V, version
    if (keycode == eKeyA) Debug(2,3); // Ctrl-A, show walkable areas
    if (keycode == eKeyX) Debug(3,0); // Ctrl-X, teleport to ro 
  }
}

function on_mouse_click(MouseButton button) // called when a mouse button is clicked. button is either LEFT or RIGHT 
{
}

function on_event(EventType event, int data) {
  if (event==eEventRestoreGame) {
    Verbs.Localize();
  }
  if (event==eEventEnterRoomBeforeFadein || event==eEventRestoreGame)
    player.PlaceOnWalkableArea();
}

#endregion

#region GUI handling

////////////////////////////////////////////////////////////////////////////////////
// Begin of GUI handling
////////////////////////////////////////////////////////////////////////////////////
function Action_Click(GUIControl *control, MouseButton button) {
  Verbs.SetAction(Verbs.GetButtonAction(control.AsButton));
}

function ScrollInv_Click(GUIControl *control, MouseButton button) {
  if (control == btnInvUp) invMain.ScrollUp();
  else invMain.ScrollDown();  
}

function btnShowOptions_OnClick(GUIControl *control, MouseButton button)
{
  ShowOptions();
}

function btnOptions_OnClick(GUIControl *control, MouseButton button)
{
    OptionGui.OnClick(control, button);
}

function btnOptions_OnSliderChange(GUIControl *control)
{
    OptionGui.OnSliderChange(control);
}

function gMain_OnClick(GUI *theGui, MouseButton button)
{

}

function btnRestartYes_OnClick(GUIControl *control, MouseButton button)
{
  OptionGui.OnClick(control, button);
}

function btnRestartNo_OnClick(GUIControl *control, MouseButton button)
{
  OptionGui.OnClick(control, button);
}

////////////////////////////////////////////////////////////////////////////////////
// End of GUI handling
////////////////////////////////////////////////////////////////////////////////////

#endregion

#region Change Player

function CharacterSwitch (const string OnOff)
{
  if (OnOff == "On")
  {
    gCharaktere.Visible = true;
    invMain.Width = 120;
  }
  else if (OnOff == "Off") 
  {
    gCharaktere.Visible = false;
    invMain.Width = 160;
  }  
}

#endregion

#region Dialog Parameter

function dialog_request(int param) {
}

#endregion

#region CHARAKTERE


#endregion

#region Inventory Items



#endregion

